
/*

- Client-side computation of the U-PSI protocol

*/

/*
 Variables description:
 
  seed: a key to generate blinding factors for y-coordinates.
  counter_key: a key that helps to regenerate the most recent blinding factors for y-coordinates.
  label_key: a key to generate a set of pseudorandom bins labels.
  shuffle_key: a key to pseudorandomly permute an array.
  BF_key: a key to generate blinding factors for Bloom filters.
  pr_moduli: a prime number used for blinding bloom filters.
  BF_counter_key: a key that helps to regenerate the most recent blinding factors for Bloom filters.
  elem: the client's set elements.
  pubmoduli: generated by the server and allows to define the field as F_{pubmoduli}.
  xpoints: x-coordinates generated by the server.
  elem_size: the number of elements in the client's set.
  xpoint_size: number of x-coordinates.
  counter: an array initially set to zero and helps the client to regenerate the most recent blinding factors.
  table_size: the hash table length.
  NoElem_in_bucket: each bin's capacity.
  pub_moduli_bitsize: bit-size of pubmoduli.
  labels_bit_size: bit-size of each label.
  pr_moduli_bitsize: bit-size of pr_moduli.
  outpoly_ID: client's ID.
  bf_parameters: parameters of bloom filters.
*/
//**********************************************************************
#include "Server.h"

//**********************************************************************


class Client{

public:
	Client();
	Client (Server*serv, bigint *, int elem_size);
	CompPerm_Request * gen_compPerm_req(bigint & tmp_key_);
	GrantComp_Info * grant_comp(CompPerm_Request * , bigint **&qq, bool);
	vector <string> find_intersection(Server_Result *, int*& size, bigint**q);
	void outsource_db(string & poly_ID);
	string update(bigint elem, string delete_insert, bigint & label, string id);

private:
	bigint* interpolate(int size, bigint* a, bigint* b, bigint N);
	void get_pubModuli_bitsize();
	int gen_binIndx(bigint elem, int table_size);
	int* find_matched_bins(bigint k_1, bigint k_2, int size);
	int* PR_shuffle(int*elem, int size, bigint seed);
	bloom_filter convert_bigint_to_BF(bigint a, bloom_parameters parameters);
	bigint* findroots(bigint *y_coord, int y_size, int& number_of_roots, bigint pubmoduli);
	bigint* blind_BFs(bigint* bf, int bf_size, bigint BF_key, int bit_size, bigint pr_moduli);
	int* find_matches(int*a,int*b, int size);
	bigint* blind_BF(bigint BF, int  indx, bigint BFkey, bigint BF_counterkey, int bit_size, bigint pr_moduli);
	bigint*	unblind_BF(bigint blinded_BF, int  indx , bigint BFkey, bigint BF_ck, int bit_size, bigint pr_moduli);
	bigint* check_vals_in_BF(bigint* vals, int val_size, bigint bf, bloom_parameters parameters, int &counter);
	bigint* assing_BFs2HT(Hashtable HT, int NoElem_in_bucket, int table_size, bloom_parameters parameters);
	bigint* gen_labels (int num,  bigint seed);
	bigint* PR_shuffle(bigint* elem, int size, bigint seed);
	Polynomial* PR_shuffle_poly(Polynomial* pol, int size, bigint seed);
	bigint* convert_BF_to_bigint(bloom_filter filter);
	bigint* unblind_BFs(bigint* BF, int BF_size, bigint BF_key, bigint BF_counter_key, int bit_size, bigint pr_moduli_);
	bigint** regen_bl_factors(bigint seed_, bigint ck, int* counter);
	bigint** gen_map (int size, bigint seed1, bigint seed2);
	bigint** R_shuffle(bigint** elem, int size);
	bigint** PR_shuffle_bins(bigint** bins, int size, bigint seed_);
	bigint** blind_shuffled_bl(bigint**s_bl, int table_size, bigint seed_, bigint pubmoduli_);
	bigint** combine_permuted_bins(bigint**& v_a, bigint**& v_b, bigint**& a, int v_size,int xpoint_size_, bigint pk_1, bigint pk_2, bigint pubmoduli);
	void get_pubModuli();
	void get_xpoints(int& size);
	void get_tablesize();
	void get_NoElem_in_bucket();
	// Variables
	bigint seed, counter_key, label_key, shuffle_key, BF_key, pr_moduli, BF_counter_key, *elem, pubmoduli, * xpoints;
	int elem_size, xpoint_size, *counter, table_size, pub_moduli_bitsize, labels_bit_size, pr_moduli_bitsize, NoElem_in_bucket;
	string outpoly_ID;
	Server* serv;
	bloom_parameters bf_parameters;

};
